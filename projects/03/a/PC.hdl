// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/PC.hdl
/**
 * A 16-bit counter.
 * if      reset(t): out(t+1) = 0
 * else if load(t):  out(t+1) = in(t)
 * else if inc(t):   out(t+1) = out(t) + 1
 * else              out(t+1) = out(t)
 */
CHIP PC {
    IN in[16],inc, load, reset;
    OUT out[16];
    
    PARTS:

    // Generate in(t)+1 for 'inc' flag
    Inc16(in=outregister, out=incout);

    Mux16(a=outregister, b=incout, sel=inc, out=outmuxa);  //Either increment or keep normal based on 'inc' control bit 
    Mux16(a=outmuxa, b=in, sel=load, out=outmuxb);         //Either load or don't, based on 'load' control bit
    Mux16(a=outmuxb, b=false, sel=reset, out=outmuxc);     //Either set '0' or keep normal based on 'reset' control bit (b=false will pass 0)

    // If any control bits are active, we're performing a 'load' operation
    // If all control bits are inactive, we're just reading the current output from the register
    Or(a=inc, b=reset, out=outora);
    Or(a=outora, b=load, out=outorb);
    
    // Input: the output from the computation we processed above with the proper control bit 
    Register(in=outmuxc, load=outorb, out=outregister, out=out); 
}
