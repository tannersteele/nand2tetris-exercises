// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM8.hdl
/**
 * Memory of eight 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Deserialize the address passed (3 bit number 000->111) into a set of standalone outputs
    DMux8Way(in=load, sel=address, 
        a=addr0,
        b=addr1,
        c=addr2,
        d=addr3,
        e=addr4,
        f=addr5,
        g=addr6,
        h=addr7
    );

    // Map each standalone output to an individual register
    Register(in=in, load=addr0, out=reg0);
    Register(in=in, load=addr1, out=reg1);
    Register(in=in, load=addr2, out=reg2);
    Register(in=in, load=addr3, out=reg3);
    Register(in=in, load=addr4, out=reg4);
    Register(in=in, load=addr5, out=reg5);
    Register(in=in, load=addr6, out=reg6);
    Register(in=in, load=addr7, out=reg7);

    // Join the register outputs back a branchable solution that aligns with original input
    Mux8Way16(
        a=reg0,
        b=reg1,
        c=reg2,
        d=reg3,
        e=reg4,
        f=reg5,
        g=reg6,
        h=reg7,
        sel=address,
        out=out
    );
}
