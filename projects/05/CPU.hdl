// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Determine if it's either an A or C instruction based on MSB
    Not(in=instruction[15], out=useAInstruction);
    Or(a=instruction[15], b=false, out=useCInstruction);

    //Register logic here

    ALU(
        x=dRegisterOut,
        y=aOrMInstructionMuxOut,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        zr=aluZeroOut,
        ng=aluNegativeOut,
        out=outM,
        out=aluOut
    );

    And(a=aluNegativeOut, b=instruction[2], out=outLessThan);
    And(a=aluZeroOut, b=instruction[1], out=outEqualTo);
    
    Or(a=aluZeroOut, b=aluNegativeOut, out=outAluZeroOrNeg);
    Not(in=outAluZeroOrNeg, out=outNotAluZeroOrNeg); // Lazy nor gate
    And(a=outNotAluZeroOrNeg, b=instruction[0], out=outGreaterThan);

    Or(a=outLessThan, b=outEqualTo, out=outLessThanEqualTo);
    Or(a=outLessThanEqualTo, b=outGreaterThan, out=pcLoadBit);
    Not(in=pcLoadBit, out=pcIncBit);

    PC(in=outARegister, reset=reset, load=pcLoadBit, inc=pcIncBit, out[0..14]=pc); // Only need 15 bits, max 32K i-cache
}