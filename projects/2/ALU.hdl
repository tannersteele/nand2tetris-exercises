// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

    // NOTE: the input bits ripple through each operation.
    //---------------------------------------
    
    // if (zx == 1): x = 0
    Mux16(a=x, b=false, sel=zx, out=outzx);

    // if (zy == 1): y = 0
    Mux16(a=y, b=false, sel=zy, out=outzy);

    //---------------------------------------

    // Pre-calculate results required for nx, ny
    Not16(in=outzx, out=notx);
    Not16(in=outzy, out=noty);

    // if (nx == 1): x = !x
    Mux16(a=outzx, b=notx, sel=nx, out=outnx);

    // if (ny == 1): y = !y
    Mux16(a=outzy, b=noty, sel=ny, out=outny);

    //---------------------------------------

    // Pre-calculate results required for (x + y)
    Add16(a=outnx, b=outny, out=fadd);

    // Pre-calculate results required for (x & y)
    And16(a=outnx, b=outny, out=fand);

    // if (f == 1): x + y else x & y
    Mux16(a=fand, b=fadd, sel=f, out=outf);

    //---------------------------------------

    // Pre-calculate results required for (out != out)
    Not16(in=outf, out=notno);

    // if (no == 1): out = !out
    Mux16(a=outf, b=notno, sel=no, out=out,              // The output here is the proper interface out (out output)
                                   out[0..7]=zrbitset1,  // Fetch the first 8 bits for zr comparison (zr output)
                                   out[8..15]=zrbitset2, // Fetch the last 8 bits for zr comparison  (zr output)
                                   out[15]=ng);          // Fetch the MSB to see if the number is negative (ng output)

    // if (out == 0): return 1 else 0
    Or8Way(in=zrbitset1, out=outzr1);
    Or8Way(in=zrbitset2, out=outzr2);
    Or(a=outzr1, b=outzr2, out=outzr3);
    Not(in=outzr3, out=zr); // Must NOT the result from both comparisons to properly format result specified above
                            // changing the interface would remove this requirement + act as an optimization
}